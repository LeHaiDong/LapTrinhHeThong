#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>

// Blynk
#define BLYNK_TEMPLATE_ID "TMPL6mE5b87dK"   // ID template tr√™n Blynk Cloud
#define BLYNK_TEMPLATE_NAME "Quickstart Template" 
#define BLYNK_AUTH_TOKEN "l1xcGDgfQyUh8PbLy5U8YrsL1R-XKa8L"  // Token ƒë·ªÉ ESP32 k·∫øt n·ªëi Blynk

// WiFi
char ssid[] = "HaiDong";     
char pass[] = "244466666";   

// Ch√¢n k·∫øt n·ªëi c·∫£m bi·∫øn + buzzer
#define GAS_PIN    34  
#define FLAME_PIN  35   
#define BUZZER_PIN 26   

// Bi·∫øn tr·∫°ng th√°i
bool gasAlarm   = false;   // C·∫£nh b√°o kh√≠ gas
bool flameAlarm = false;   // C·∫£nh b√°o l·ª≠a
bool userMuted  = false;   // Ng∆∞·ªùi d√πng t·∫Øt c√≤i th·ªß c√¥ng
unsigned long lastBeepTime = 0; // Th·ªùi gian ƒë·ªÉ t·∫°o ti·∫øng beep beep
bool beepState = false;         // Tr·∫°ng th√°i beep hi·ªán t·∫°i

// FreeRTOS task handle
TaskHandle_t TaskSensor, TaskBuzzer, TaskBlynk;

// ---------------- 1: ƒê·ªçc c·∫£m bi·∫øn ----------------
void taskSensor(void *pvParameters) {
  while (1) {
    int gasRaw     = analogRead(GAS_PIN);                  // ƒê·ªçc gi√° tr·ªã ADC t·ª´ c·∫£m bi·∫øn kh√≠
    int gasValue   = map(gasRaw, 0, 4095, 0, 1000);        // Chu·∫©n h√≥a v·ªÅ thang 0-1000
    int flameValue = digitalRead(FLAME_PIN);               // ƒê·ªçc gi√° tr·ªã c·∫£m bi·∫øn l·ª≠a (0: c√≥ l·ª≠a, 1: an to√†n)

    // G·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn l√™n Blynk (theo Vpin)
    Blynk.virtualWrite(V0, gasValue);
    Blynk.virtualWrite(V1, flameValue);
    Blynk.virtualWrite(V2, (gasAlarm || flameAlarm));      // Tr·∫°ng th√°i h·ªá th·ªëng

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ph√°t hi·ªán
    bool gasDetected   = (gasValue > 400);   // N·∫øu n·ªìng ƒë·ªô gas cao
    bool flameDetected = (flameValue == 0);  // N·∫øu ph√°t hi·ªán l·ª≠a

    if (flameDetected && !userMuted) {
      flameAlarm = true;
      gasAlarm   = false;
      digitalWrite(BUZZER_PIN, HIGH);  // C√≤i h√∫ li√™n t·ª•c
      Blynk.virtualWrite(V3, 1);
      Blynk.logEvent("fire_alert", "üî• Ph√°t hi·ªán NG·ªåN L·ª¨A! Ki·ªÉm tra ngay!");  // G·ª≠i th√¥ng b√°o Blynk
    }
    else if (gasDetected && !userMuted && !flameAlarm) {
      gasAlarm = true;
      Blynk.virtualWrite(V3, 1);
      Blynk.logEvent("fire_alert", "‚ö†Ô∏è N·ªìng ƒë·ªô KH√ç GAS cao b·∫•t th∆∞·ªùng!");
    }
    else if (!gasDetected && !flameDetected) {
      gasAlarm   = false;
      flameAlarm = false;
      userMuted  = false;
      digitalWrite(BUZZER_PIN, LOW);   // T·∫Øt c√≤i khi an to√†n
      Blynk.virtualWrite(V3, 0);
    }

    vTaskDelay(2000 / portTICK_PERIOD_MS); // Delay 2s ƒë·ªçc l·∫°i
  }
}

// ----------------  2: X·ª≠ l√Ω Buzzer ----------------
void taskBuzzer(void *pvParameters) {
  while (1) {
    if (gasAlarm && !flameAlarm && !userMuted) {
      unsigned long currentMillis = millis();
      if (currentMillis - lastBeepTime > 500) {   // T·∫°o ti·∫øng beep m·ªói 0.5s
        lastBeepTime = currentMillis;
        beepState = !beepState;
        digitalWrite(BUZZER_PIN, beepState ? HIGH : LOW);
      }
    }
    vTaskDelay(100 / portTICK_PERIOD_MS); // Ki·ªÉm tra nhanh h∆°n (0.1s)
  }
}

// ---------------- 3: Blynk run ----------------
void taskBlynk(void *pvParameters) {
  while (1) {
    Blynk.run();   // Blynk c·∫ßn ch·∫°y li√™n t·ª•c
    vTaskDelay(10 / portTICK_PERIOD_MS);  // Tr√°nh chi·∫øm CPU
  }
}

// ---------------- Blynk Control ----------------
BLYNK_WRITE(V3) {  // ƒêi·ªÅu khi·ªÉn c√≤i t·ª´ app Blynk
  int buzzerState = param.asInt();
  if (buzzerState == 1) {
    userMuted  = false;
    flameAlarm = true;
    digitalWrite(BUZZER_PIN, HIGH);   // B·∫≠t c√≤i
  } else {
    userMuted  = true;
    flameAlarm = false;
    gasAlarm   = false;
    digitalWrite(BUZZER_PIN, LOW);    // T·∫Øt c√≤i
  }
}

// ---------------- SETUP ----------------
void setup() {
  Serial.begin(115200);
  pinMode(GAS_PIN, INPUT);
  pinMode(FLAME_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);   // K·∫øt n·ªëi Blynk + WiFi

  // T·∫°o task FreeRTOS ch·∫°y song song
  xTaskCreatePinnedToCore(taskSensor, "TaskSensor", 4096, NULL, 2, &TaskSensor, 1);
  xTaskCreatePinnedToCore(taskBuzzer, "TaskBuzzer", 2048, NULL, 1, &TaskBuzzer, 1);
  xTaskCreatePinnedToCore(taskBlynk,  "TaskBlynk",  4096, NULL, 3, &TaskBlynk,  1);

  Serial.println("‚úÖ H·ªá th·ªëng RTOS kh·ªüi ƒë·ªông!");
}

void loop() {
  // loop tr·ªëng v√¨ ƒë√£ chia task FreeRTOS
}
